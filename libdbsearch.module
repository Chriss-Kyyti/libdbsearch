<?php

/**
 * @file
 * Module to make search to library database
 * and showing the result in Drupal page.
 * 
 * Drupal Search Interface can be enabled by including file 
 * includes/libdbsearch_dsii.inc to project.
 *
 * Last modified: 14.03.2013 Mika Hatakka
 */

/**
 * Implements hook_help().
 */
function libdbsearch_help($path, $arg) {
  if ($path == 'admin/help#libdbsearch') {
    return check_markup(file_get_contents(dirname(__FILE__) . "/README.txt"));
  }
}

/**
 * Implemtents hook_menu().
 */
function libdbsearch_menu() {
  $items = array();
  $items['admin/config/search/libdbsearch'] = array(
    'title' => 'Library database',
    'description' => 'Description',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('libdbsearch_admin'),
    'access arguments' => array('administer library search'),
    'file' => 'libdbsearch.admin.inc',
  );
  $items['admin/config/search/libdbsearch/general'] = array(
    'title' => 'General settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['libdbsearch'] = array(
    'title' => 'Library database search',
    'page callback' => 'libdbsearch_view',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function libdbsearch_permission() {
  return array(
    'administer library search' => array(
      'title' => t('Administer library database search'),
    ),
  );
}

/**
 * Create the result page.
 * 
 * @param type $action
 * @param type $keys
 * @return string
 */
function libdbsearch_view($action = 'empty', $keys = '') {
  if (!isset($_POST['form_id'])) {

    if ($action == 'empty') {
      return 'Ohjeita haun tekemiseen.';
    }
//    dpm($keys, 'keys');
//    dpm($action, 'action');
//    dpm($_GET, 'GET');
//    watchdog(7, 'Form send');

    $ret = libdbsearch_data($keys, $action);

    if (empty($ret)) {
      $output = 'Internal Function Error.';
    }
    else {
      $output = '';

      if (isset($ret['Otsikko'])) {
        if (isset($ret['Otsikko']['Linkki']['Losoite'])) {
          drupal_set_title(_libdbsearch_extract_link($ret['Otsikko']['Linkki']), PASS_THROUGH);
        }
        else {
          drupal_set_title($ret['Otsikko']);
        }

        if (isset($ret['Virhe'])) {
          if (isset($ret['Teksti'][1]) && $ret['Teksti'][1] == 'No results') {
            $output .= t('Your search yielded no results');
          }
          else {
            $output .= t('Error performing the search.');
          }
        }
        else {
          $f = 'libdbsearch_set_' . $action . '_data';
          if (function_exists($f)) {
            $output .= $f($ret);
          }
          else {
            $output .= 'Unknown function ' . $f . '<br />';
          }
        }
      }
    }

    return $output;
  }
//  dpm($_GET, 'GET');
//  dpm($_POST, 'POST');
//  watchdog(7, 'The other');
  return '';
}

/**
 * Does the search to the Web-Origo.
 * 
 * @param string $keys search words and filters
 * @param string $action chosen action
 * @return array search results
 */
function libdbsearch_data($keys = '', $action = 'haku') {
  $origo = new LibdbConnection();
  $origo->init($action, $keys);
  $result = $origo->askPage();
//  dpm($result, 'result');

  if (empty($result)) {
    $ret = NULL;
  }
  else {
    $parser = new OrigoParser($result, $action);
    $something = $parser->constructXML();
//    dpm($something);

    $xml = str_replace(
        array('&nbsp;', '&auml;', '&amp;#228;'), array(' ', 'ä', 'ä'), $something);

    $ret = json_decode(json_encode((array) simplexml_load_string($xml)), 1);
  }
//  dpm($ret, 'result array');

  return $ret;
}

//-----------------------------------------------
// Libdbsearch Origo page wrappers.

/**
 * Page for search result list.
 * 
 * @param type $data
 * @return type
 */
function libdbsearch_set_haku_data($data) {
  $output = '';
  if (isset($data['Hakuinfo']['Teksti'])) {
    if (is_array($data['Hakuinfo']['Teksti'])) {
      foreach ($data['Hakuinfo']['Teksti'] as $val) {
//        dpm($val, 'check_plain');
        $output .= check_plain($val) . '<br />';
      }
    }
    else {
//      dpm($data['Hakuinfo']['Teksti'], 'check_plain');
      $output .= check_plain($data['Hakuinfo']['Teksti']) . '<br />';
    }
  }

  $info = _libdbsearch_add_info($data);
//  dpm($info);
  if (count($info) > 0) {
    $output .= $info[0];
  }

  $navigation = _libdbsearch_add_navi($data);
  if (count($navigation) > 0) {
    $output .= $navigation[0];
  }

  $header = array();
  $rows = array();
  $hdr = FALSE;
  if (isset($data['Hakutulos'])) {
    if (isset($data['Hakutulos']['Selausotsikot']['Totsikko'])) {
      foreach ($data['Hakutulos']['Selausotsikot']['Totsikko'] as $value) {
        $header[] = _libdbsearch_extract_text($value);
      }
    }
    if (isset($data['Hakutulos']['Selauslista']['Teos'])) {
      if (isset($data['Hakutulos']['Selauslista']['Teos'][0])) {
        foreach ($data['Hakutulos']['Selauslista']['Teos'] as $value) {
//        $row = array();
//        foreach ($value as $val) {
//          $row[] = _libdbsearch_extract_value($val);
//        }
//        $rows[] = $row;
          $rows[] = _libdbsearch_work_row($value);
        }
      }
      else {
        $rows[] = _libdbsearch_work_row($data['Hakutulos']['Selauslista']['Teos']);
      }
    }
    if (isset($data['Hakutulos']['Aineistolajittain']['Aineistolaji'])) {
      foreach ($data['Hakutulos']['Aineistolajittain'] as $key => $value) {
        $row = array();
        foreach ($value as $key => $val) {
          if ($hdr == FALSE) {
//            dpm($key, 'check_plain');
            $header[] = check_plain($key);
          }
          $row[] = _libdbsearch_extract_value($val);
        }
        $rows[] = $row;
        $hdr = TRUE;
      }
    }
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  if (count($info) > 1) {
    $output .= $info[1];
  }

  if (count($navigation) > 1) {
    $output .= $navigation[1];
  }

  return $output;
}

function libdbsearch_set_selauslista_data($data) {
  return libdbsearch_set_haku_data($data);
}

function libdbsearch_set_teos_data($data) {
  $output = '';

  $info = _libdbsearch_add_info($data);
//  dpm($info);

  $navigation = _libdbsearch_add_navi($data);
  if (count($navigation) > 0) {
    $output .= $navigation[0];
  }


  if (isset($data['Teostiedot']['Rivi'])) {
    $output .= _libdbsearch_create_work_table($data['Teostiedot']['Rivi']);
  }

  if (isset($data['Sisaltyy_teokseen']['Rivi'])) {
    $output .= '<h3>' . t('Part of') . '</h3>';
    $output .= _libdbsearch_create_work_table($data['Sisaltyy_teokseen']['Rivi']);
  }

  if (isset($data['Kuva'])) {
    $image = array(
      'path' => $data['Kuva'],
      'width' => 100,
//      'height' => 50,
      'alt' => 'Teoksen kansikuva',
//      'title' => '',
      'attributes' => array('class' => 'work_pic'),
    );
    $output .= theme('image', $image);
  }

  if (isset($info['Tarkat tiedot'])) {
    $output .= $info['Tarkat tiedot'];
    unset($info['Tarkat tiedot']);
  }

  if (isset($info['Näytä sisältö / kappaleet'])) {
    $output .= $info['Näytä sisältö / kappaleet'];
    unset($info['Näytä sisältö / kappaleet']);
  }

  if (isset($info['Esittelyteksti'])) {
    $output .= $info['Esittelyteksti'];
    unset($info['Esittelyteksti']);
  }

  if (isset($data['Valitun_saatavuus'])) {
    $output .= _libdbsearch_availability_table($data['Valitun_saatavuus']);
  }

  if (isset($data['Saatavuus'])) {
    $output .= _libdbsearch_availability_table($data['Saatavuus']);
  }

  foreach ($info as $value) {
    if (empty($value)) {
      continue;
    }
    $output .= $value;
  }
  return $output;
}

function libdbsearch_set_osakohteet_data($data) {
  $output = '';
  $header = array();
  $rows = array();

  if (isset($data['Teksti'])) {
    if (isset($data['Teksti'][0])) {
      foreach ($data['Teksti'] as $value) {
        if (empty($value)) {
          continue;
        }
//        dpm($value, 'check_plain');
        $output .= check_plain($value) . '<br />';
      }
    }
    else {
//      dpm($data['Teksti'], 'check_plain');
      $output .= check_plain($data['Teksti']) . '<br />';
    }
  }

  if (isset($data['Osakohteet'])) {
    if (isset($data['Osakohteet']['Totsikot']['Totsikko'])) {
      foreach ($data['Osakohteet']['Totsikot']['Totsikko'] as $value) {
        $header[] = _libdbsearch_extract_text($value);
      }
    }
    if (isset($data['Osakohteet']['Rivi'])) {
      foreach ($data['Osakohteet']['Rivi'] as $value) {
        $row = array();
        foreach ($value as $val) {
          $row[] = _libdbsearch_extract_value($val);
        }
        $rows[] = $row;
      }
    }
  }

  $output .= theme('table', array('header' => $header, 'rows' => $rows));

  $info = _libdbsearch_add_info($data);

  $navigation = _libdbsearch_add_navi($data);

  if (isset($navigation[0])) {
    $output .= $navigation[0];
  }
  if (isset($info[0])) {
    $output .= $info[0];
  }

  return $output;
}

//-----------------------------------------------
// Libdbsearch common helper functions.

/**
 * Prints out text or link from section.
 * 
 * @param type $value
 * @return type
 */
function _libdbsearch_extract_text($value) {
  $output = '';
  if (isset($value['Teksti'])) {

    if (is_array($value['Teksti'])) {
      foreach ($value['Teksti'] as $str) {
        $output .= $str . '<br />';
      }
    }
    else {
      $output = $value['Teksti'];
    }
  }
  elseif (isset($value['Linkki'])) {
    $output = _libdbsearch_extract_link($value['Linkki']);
  }

  return $output;
}

function _libdbsearch_extract_link($link) {
  if (isset($link['Lnewwnd']) && strtoupper($link['Lnewwnd']) == 'TRUE') {
    if (strpos($link['Losoite'], 'http://') === FALSE) {
      $linkki = variable_get('libdb_server', '') . $link['Losoite'];
    }
    else {
      $linkki = $link['Losoite'];
    }
  }
  else {
    $linkki = str_replace('.asp?', '/', $link['Losoite']);
    $linkki = 'libdbsearch/' . $linkki;
  }
  $output = l($link['Lteksti'], $linkki);
  if (isset($link['Lextrateksti'])) {
    $output .= $link['Lextrateksti'];
  }
  return $output;
}

/**
 * Prints out text or link from two level section.
 * 
 * @param type $value
 * @return type
 */
function _libdbsearch_extract_value($value) {
  if (is_array($value)) {
    return _libdbsearch_extract_text($value);
  }
  else {
    return $value;
  }
}

/**
 * Create's page navigation .
 * 
 * @param type $data
 * @return type
 */
function _libdbsearch_add_navi($data) {
  $output = array();

  if (isset($data['Navigointi'])) {
    foreach ($data['Navigointi'] as $val) {
      $out_navi = '';
      if (isset($val['Teksti'])) {
        $out_navi .= $val['Teksti'];
      }
      if (isset($val['Valinta'])) {
        foreach ($val['Valinta'] as $value) {
          $out_navi .= _libdbsearch_extract_navi_text($value);
        }
      }
      if (isset($val['Haettu'])) {
        $out_navi .= _libdbsearch_extract_navi_text($val['Haettu']);
      }
      $output[] = $out_navi;
    }
  }
  return $output;
}

/**
 * Extracts one navigation component.
 * 
 * @param type $data
 * @return string
 */
function _libdbsearch_extract_navi_text($data) {
  $output = '';
  if (is_array($data)) {
    if (isset($data['@attributes']['separator'])) {
      if ($data['@attributes']['separator'] == 'yes') {
        $output .= ' | ';
      }
    }
    if (isset($data['Haettu'])) {
      $output .= $data['Haettu'] . ' ';
    }
    if (isset($data['Linkki'])) {
      $output .= _libdbsearch_extract_text($data) . ' ';
    }
  }
  else {
    $output .= $data . ' ';
  }
  return $output;
}

/**
 * Create's section info data
 * 
 * @param type $data
 * @return string
 */
function _libdbsearch_add_info($data) {
  $output = array();
  $cnt = 0;

  if (isset($data['Lohko'])) {
    if (isset($data['Lohko'][0])) {
      foreach ($data['Lohko'] as $val) {
        $out_info = '';
        $idx = $cnt;
        if (isset($val['Teksti'])) {
          $out_info .= _libdbsearch_extract_text($val);
        }
        if (isset($val['Linkki'])) {
          $out_info .= _libdbsearch_extract_text($val);
          $idx = $val['Linkki']['Lteksti'];
        }
        if (!empty($out_info)) {
          $out_info .= '<br />';
        }
        $output[$idx] = $out_info;
        $cnt++;
      }
    }
    else {
      $output[] = _libdbsearch_extract_text($data['Lohko']);
    }
  }

  return $output;
}

function _libdbsearch_create_work_table($data) {
  $header = array();
  $rows = array();

  if(isset($data[0])) {
  foreach ($data as $value) {
    $rows[] = _libdbsearch_work_table_row($value);
  }
  }
  else {
    $rows[] = _libdbsearch_work_table_row($data);
  }

  return theme('table', array('header' => $header, 'rows' => $rows));
}

function _libdbsearch_availability_table($data) {
  $output = '';
  $header = array();
  $rows = array();
  $hdr = FALSE;

  if (isset($data['Valiotsikko'])) {
    $output .= '<h3>' . $data['Valiotsikko'] . '</h3>';
  }

  if (isset($data['Teksti'])) {
    $output .= $data['Teksti'];
  }

  if (isset($data['Teos'])) {
    foreach ($data['Teos'] as $val) {
      $row = array();
      foreach ($val as $key => $value) {
        if ($hdr == FALSE) {
          $header[] = $key;
        }
        if (is_array($value)) {
          $row[] = _libdbsearch_extract_text($value);
        }
        else {
          $row[] = $value;
        }
      }
      $hdr = TRUE;
      $rows[] = $row;
    }
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }


  if (isset($data['Kirjasto'])) {
    if (isset($data['Kirjasto'][0])) {
      foreach ($data['Kirjasto'] as $lib) {
        _libdbsearch_make_avail_tablerows($lib, $header, $rows, $hdr);
        $hdr = TRUE;
      }
    }
    else {
      _libdbsearch_make_avail_tablerows($data['Kirjasto'], $header, $rows, $hdr);
    }
    $header[0] = t('Location');
    $output .= theme('table', array('header' => $header, 'rows' => $rows));
  }

  return $output;
}

function _libdbsearch_make_avail_tablerows($lib, &$header, &$rows, $hdr) {
  if (isset($lib['Kirjastonimi'])) {
    $rows[] = array(array('data' => $lib['Kirjastonimi'], 'colspan' => 7));
  }
  if (isset($lib['Sijainti'])) {
    $row = array();
    foreach ($lib['Sijainti'] as $key => $value) {
      if ($hdr == FALSE) {
        $header[] = $key;
      }
      if (is_array($value)) {
        $row[] = _libdbsearch_extract_text($value);
      }
      else {
        $row[] = $value;
      }
    }
    $rows[] = $row;
  }
}

function _libdbsearch_work_row($value) {
  $row = array();
  foreach ($value as $val) {
    $row[] = _libdbsearch_extract_value($val);
  }
  return $row;
}

function _libdbsearch_work_table_row($value) {
  $row = array();
  $row[] = isset($value['Selite']) ? $value['Selite'] : '';

  if (isset($value['Tieto'][0])) {
    $str = '';
    foreach ($value['Tieto'] as $val) {
      $str .= _libdbsearch_extract_value($val) . '<br />';
    }
  }
  else {
    $str = isset($value['Tieto']) ? _libdbsearch_extract_value($value['Tieto']) : '';
  }
  $row[] = $str;
  return $row;
}

/**
 * Get one of the lists in database to use in dropdown select.
 *
 * @param integer $sel type of list
 * @return array chosen list array
 */
function libdbsearch_read_list($list) {
  $ret = FALSE;
  $result = db_query('SELECT arvo, teksti FROM {libdbsearch_lists} 
    WHERE tyyppi = :tyyppi ORDER BY nro', array(':tyyppi' => $list));
  foreach ($result as $record) {
    $ret[$record->arvo] = $record->teksti;
  }
  if ($ret === FALSE) {
    $ret = array('' => '-');
  }
  return $ret;
}

/**
 * Implemtents hook_cron().
 */
function libdbsearch_cron() {
// Check lists every Sunday after 3 in the morning.
  if ((date('w') == 0) && (date('G') > 3) &&
      variable_get('libdbsearch_lists_updated', 0) < (time() - 'LIST_UPDATE_PERIOD')) {
    $origo_upd = new LibdbUpdate();
    $origo_upd->origoUpdateLists();
    variable_set('libdbsearch_lists_updated', time());
  }
}
